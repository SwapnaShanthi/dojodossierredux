{"version":3,"sources":["logo.svg","redux.js","components/DojoDossierMain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","tabReducer","state","arguments","length","undefined","initialState","action","console","log","type","tabItems","map","tabItem","id","payload","update","tablist","$push","newItemlist","Object","assign","nextID","concat","toConsumableArray","store","createStore","configureStore","DojoDossierMain","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retriveAll","axios","get","then","response","addTabList","data","changeClassName","setState","tablisterror","addtaberror","addedItemName","addedlistItem","error","catch","tabcontent","document","getElementsByClassName","i","className","replace","tabcontentactive","j","buttonactive","k","buttoninactive","h","addTabOnChange","newTabObject","name","post","updateTabListOnChange","item","objToUpdate1","push","handleChange","e","defineProperty","target","value","_this2","displayTab","items","index","react_default","a","createElement","onClick","displayDetails","tabList","tablistitem","tablistindex","onChange","placeholder","Component","connect","dispatch","addToTab","updateTabDetails","App","components_DojoDossierMain","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72ea539e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {\n    createStore,\n} from 'redux';\nimport update from 'react-addons-update';\n\nexport const addToTab = (payload) => ({\n    type: 'ADD_TAB',   \n    payload                     // <-- action.type\n});\nexport const addTabList = (payload) => ({\n    type: 'ADD_TAB_LIST',   \n    payload                     // <-- action.type\n});\n\nexport const updateTabDetails = (payload) => ({\n    type: 'UPDATE_TAB_DETAILS',   \n    payload                     // <-- action.type\n});\n\nexport const tabReducer=(state =initialState, action)=>{\n    console.log(\"reducer state\",state,action.type);\n    switch (action.type) {\n        \n      case 'UPDATE_TAB_DETAILS':\n           const tabItems= state.tabItems.map( tabItem => {\n            if (tabItem.id === action.payload.id) {\n                return update(tabItem,{tablist:{$push: [action.payload.newItemlist]}})\n            }\n             return tabItem;\n           })\n            return Object.assign({},\n                                state,\n                                {tabItems:tabItems,nextID:state.nextID})\n      case 'ADD_TAB':\n\n            return Object.assign({},\n                                 state,\n                                 { tabItems:[...state.tabItems,action.payload],nextID:state.nextID+1}\n                                )\n      case 'ADD_TAB_LIST':\n            return Object.assign({},\n                                 state,\n                                 { tabItems:action.payload,nextID:action.payload[action.payload.length-1].id+1}\n                                                    )                         \n       default:\n            return state;\n    }\n}\n\n\n\nconst initialState = { \n    tabItems: [],\n     nextID:0             \n};\n\nexport function configureStore(initialState = initialState) { // initialState = initialState | {}\n    const store = createStore(tabReducer,initialState);\n    return store;\n};\n\nexport const store = configureStore();\n","import React, { Component } from \"react\";\nimport { addToTab, updateTabDetails,addTabList} from '../redux.js';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport './../style/dojodossier.css';\nimport axios from 'axios';\n\nclass DojoDossierMain extends Component {\n    constructor(props) {\n      super(props);\n      this.state={addedItemName:\"\",\n                  addedlistItem:\"\",\n                  error:\"\",\n                  addtaberror:\"\",\n                  tablisterror:\"\"\n                }\n    };\n    retriveAll=(type)=>{\n      axios.get(`http://localhost:5000/gettablist/`)\n           .then((response )=> {\n              this.props.addTabList(response.data.data);\n              if(type=== \"all\"){\n                this.changeClassName(this.props.tabItems[0].id)\n              }else if(type=== \"addTab\"){\n                this.changeClassName(this.props.tabItems[this.props.tabItems.length-1].id)\n              }\n              this.setState({tablisterror:\"\"});\n              this.setState({addtaberror:\"\"});\n              this.setState({addedItemName:\"\"});\n              this.setState({addedlistItem:\"\"});\n              this.setState({error:\"\"});\n           })\n           .catch((error) => {\n              this.setState({error:\"Server connection failed\"});\n           });\n    }\n    componentDidMount(){\n      this.retriveAll(\"all\");\n    }\n    \n    changeClassName=(id)=>{\n      let tabcontent = document.getElementsByClassName(\"tabcontentdisable\");\n        for (let i = 0; i < tabcontent.length; i++) {\n           if(tabcontent[i].id === id){\n             tabcontent[i].className = tabcontent[i].className.replace(\"tabcontentdisable\", \"tabcontentactive\");\n           }\n           \n        }\n        let tabcontentactive = document.getElementsByClassName(\"tabcontentactive\");\n\n        if(tabcontentactive.length>0){\n            for (let j = 0; j < tabcontentactive.length; j++) {\n                if(tabcontentactive[j].id !== id){\n                   tabcontentactive[j].className = tabcontentactive[j].className.replace(\"tabcontentactive\", \"tabcontentdisable\");\n                }\n            } \n        }\n        let buttonactive = document.getElementsByClassName(\"tablinks\");\n\n        if(buttonactive.length>0){\n            for (let k = 0; k < buttonactive.length; k++) {\n                if(buttonactive[k].id === id){\n                    buttonactive[k].className = buttonactive[k].className.replace(\"tablinks\", \"active\");\n                }\n            } \n        }\n        let buttoninactive = document.getElementsByClassName(\"active\");\n\n        if(buttoninactive.length>0){\n            for (let h = 0; h < buttoninactive.length; h++) {\n                if(buttoninactive[h].id !== id){\n                    buttoninactive[h].className = buttoninactive[h].className.replace(\"active\", \"tablinks\");\n                }\n            } \n        }\n\n    } \n    addTabOnChange=()=>{\n        let newTabObject={\n                           id:this.props.nextID,\n                           name:this.state.addedItemName,\n                           tablist:[]\n                         }\n        //this.props.addToTab(newTabObject);\n      if(this.state.addedItemName!==\"\") {\n        axios.post(`http://localhost:5000/addtabitem/`,{newTabObject})\n             .then((response) => {\n              console.log(\"posted a the tabitem\",response.data);\n              this.retriveAll(\"addTab\");\n              this.setState({tablisterror:\"\"});\n              this.setState({addtaberror:\"\"});\n              this.setState({addedItemName:\"\"});\n              this.setState({addedlistItem:\"\"});\n              this.setState({error:\"\"});\n              \n             })\n             .catch((error) => {\n                this.setState({error:\"Server connection failed\"});\n             });\n      }else{\n        this.setState({addtaberror:\"Please enter a value\"});\n      }       \n    }\n    updateTabListOnChange=(item)=>{\n       /* let objToUpdate={ id:item.id,\n                          newItemlist: this.state.addedlistItem\n                        }\n                        console.log(\"objToUpdate\",objToUpdate)\n          this.props.updateTabDetails(objToUpdate);*/\n      if(this.state.addedlistItem!==\"\"){    \n          let objToUpdate1={ id:item.id,\n              name:item.name,\n              tablist:item.tablist\n\n          }\n          objToUpdate1.tablist.push(this.state.addedlistItem);\n          axios.post(`http://localhost:5000/updatetabdetaillist/`,{objToUpdate1})\n              .then((response) => {\n                console.log(\"posted a the tabitem\",response.data);\n                this.retriveAll(\"updatetablist\");\n                this.setState({tablisterror:\"\"});\n                this.setState({addtaberror:\"\"});\n                this.setState({addedItemName:\"\"});\n                this.setState({addedlistItem:\"\"});\n                this.setState({error:\"\"});\n              })\n              .catch((error) => {\n                  this.setState({error:\"Server connection failed\"});\n              });   \n        }else{\n          this.setState({tablisterror:\"Please enter a value\"});\n        }      \n\n    }\n\n    handleChange=(e)=>{\n        this.setState({[e.target.name]:e.target.value});\n        this.setState({tablisterror:\"\"});\n        this.setState({addtaberror:\"\"});\n    }\n\n    render() {\n      const error=() => {\n        if(this.state.error!==\"\"){\n          return <div className=\"errormessagediv\">{this.state.error}</div>\n        }\n       } \n       const addtaberror=() => {\n        if(this.state.addtaberror!==\"\"){\n          return <div className=\"errormessagediv\">{this.state.addtaberror}</div>\n        }\n       } \n       const tablisterror=() => {\n        if(this.state.tablisterror!==\"\"){\n          return <div className=\"errormessagediv\">{this.state.tablisterror}</div>\n        }\n       }\n      \n      const displayTab= this.props.tabItems.map((items,index)=>{\n         return (\n                    <div className=\"tab\">\n                        <button id={items.id} className=\"tablinks\" onClick={()=>{this.changeClassName(items.id)}}>{items.name}</button>\n                    </div>\n         )\n\n      })\n      const displayDetails= this.props.tabItems.map((items,index)=>{\n        let tabList=null;\n        if(items.tablist.length>0){\n            tabList=items.tablist.map((tablistitem,tablistindex)=>{\n                return (\n                \n                        <p><span className=\"spanstyle\">*</span><span>{tablistitem}</span></p> \n                \n                )\n\n            })\n        }\n        return (\n            <div id={items.id} className=\"tabcontentdisable\">\n                  {tabList}\n                  <div className=\"inputbottomdiv\">\n                     {tablisterror()}\n                    <input className=\"inputbottomboxstyle\" onChange={this.handleChange} value={this.state.addedlistItem} type=\"text\" name=\"addedlistItem\" placeholder=\"Enter Task\" />\n                    <button onClick={()=>{this.updateTabListOnChange(items)}} className=\"bottombuttonstyle\" type=\"button\" >Add</button>\n                 </div>\n             </div>\n\n        )\n\n     })\n    \n\n      return (\n        <div className=\"outerdiv\">\n            <h1>Dojo Dossier</h1>\n             <div className=\"inputtopdiv\">\n                   {addtaberror()}\n                    <input className=\"inputtopboxstyle\" onChange={this.handleChange} value={this.state.addedItemName} type=\"text\" name=\"addedItemName\" placeholder=\"Title\" />\n                    <button onClick={()=>{this.addTabOnChange()}} className=\"topbuttonstyle\" type=\"button\" >Add</button>\n            </div>\n            {error()}\n            <div className=\"displaytab\">\n               {displayTab}\n            </div>\n            <div className=\"displaydetails\">\n               {displayDetails}\n            </div>\n           \n      </div>\n      );\n    }\n  }\n  \n  const mapStateToProps = (state) => ({\n    tabItems:state.tabItems,\n    nextID:state.nextID\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    addToTab: (payload) => dispatch(addToTab(payload)),\n    updateTabDetails: (payload) => dispatch(updateTabDetails(payload)),\n    addTabList:(payload) => dispatch(addTabList(payload))\n  })\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(DojoDossierMain);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DojoDossierMain from './components/DojoDossierMain';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <DojoDossierMain />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux';\n\nReactDOM.render(<Provider store={store}>\n                   <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}